use pi

# this Bool definition will shadow the one in [bool.ths]
data Bool = TT | FF
data Four = C1 | C2 | C3 | C4
data Eight = E1 | E2 | E3 | E4 | E5 | E6 | E7 | E8
data Three = B1 | B2 | B3
data Nat2 = Nat2 (Bool * Bool)
data Nat3 = Nat3 (Bool * Bool * Bool)
data Nat = Z | S Nat

iso id1 : 1 = 1
| () = ()

iso not : 1 + 1 = 1 + 1
| inL () = inR ()
| inR () = inL ()

iso fseq3 : f:(A = B) -> g:(B = C) -> h:(C = D) -> (A = D)
| a = h (g (f a))

iso fseq4 : f:(A = B) -> g:(B = C) -> h:(C = D) -> i:(D = E) -> (A = E)
| a = i (h (g (f a)))

iso embed_2 : f:(A = B) -> (A * Bool = B * Bool)
| a, x = f a, x

iso embed_8 : f:(A = B) -> (A * Eight = B * Eight)
| a, x = f a, x

iso next_2 : Bool = Bool
| FF = TT | TT = FF

iso next_8 : Eight = Eight
| E1 = E2 | E2 = E3 | E3 = E4 | E4 = E5 | E5 = E6 | E6 = E7 | E7 = E8 | E8 = E1

iso sqrt_2 : f:(A = A) -> (A * Bool = A * Bool)
| (a, FF) = (a, TT)
| (a, TT) = (f a, FF)

iso sqrt_4 : f:(A = A) -> (A * Four = A * Four)
| (a, C1) = (a, C3)
| (a, C2) = (a, C4)
| (a, C3) = (f a, C1)
| (a, C4) = (f a, C2)

# sqrt_not == sqrt_2 ~f:not
iso sqrt_not : (1 + 1) * Bool = (1 + 1) * Bool
| aa = sqrt_2 ~f:not aa

# unit with 8 phases (8th root of id1), see the paper [sqrtpi]
iso ω : 1 * Eight = 1 * Eight
| () , x = () , next_8 x

iso ω2 : 1 * Eight = 1 * Eight
| () , x = () , next_8 (next_8 x)

# s_gate = fplus ~f:id1 ~g:ω
iso s0 : 1 + (1 * Eight) = 1 + (1 * Eight)
| inL () = inL (id1 ())
| inR aa = inR (ω2 aa)

iso s1 : (1 * Eight) + (1 * Eight) = (1 * Eight) + (1 * Eight)
| inL aa = inL (embed_8 ~f:id1 aa)
| inR aa = inR (ω2 aa)

iso protoS : (1 + 1) * Eight = (1 + 1) * Eight
| factor2 aa = factor2 (s1 aa)

eval protoS (inL () , E3)
eval protoS (inR () , E3)

{--
question : how to 'compose' [sqrt_not] and [protoS]? 
they have different types but the same pattern [(1 + 1) * _]...
attempt 1 : <naive mutural embedding>
--}


# <eta-expansion> embededS == embed_2 ~f:protoS
iso embededS : (1 + 1) * Eight * Bool = (1 + 1) * Eight * Bool
| aa = embed_2 ~f:protoS aa

# <eta-expansion> embededSqrtNot == embed_8 ~f:sqrt_not
iso embededSqrtNot : (1 + 1) * Bool * Eight = (1 + 1) * Bool * Eight
| aa = embed_8 ~f:sqrt_not aa

eval embededS (inL (), E3, TT)
eval embededS (inR (), E3, TT)

{--
this is not desirable. need to let [embededS] depends on the [Bool] value.
--}

{--
attempt 2 : <Bloch-Sphere assisted embedding> (?)
--}


{--
iso embededS : (1 + 1) * Eight * Bool = (1 + 1) * Eight * Bool
| aaa = embed_2 ~f:protoS aaa

iso embededSqrtNot : (1 + 1) * Bool * Eight = (1 + 1) * Bool * Eight
| a, TT, E1 = not a, FF, E1
| a, TT, E3 = a, TT, E3
| a, TT, E5 = not a, FF, E5
| a, TT, E7 = a, TT, E7
| a, TT, E2 = not a, TT, E4
| a, TT, E4 = not a, TT, E2
| a, TT, E6 = not a, TT, E8
| a, TT, E8 = not a, TT, E6
| ...
--}





{--
isomorphic types : need to convert one type into the other?
attempt : use [swapTimes] to <mediate> function composition...
--}

iso swap3 : Main * Cyc1 * Cyc2 = Main * Cyc2 * Cyc1
| x, c1, c2 = x, c2, c1

iso vs : (1 + 1) * Eight * Bool = (1 + 1) * Eight * Bool
| aaa = fseq4 ~f:embededS ~g:swap3 ~h:embededSqrtNot ~i:swap3 aaa

iso svs : (1 + 1) * Eight * Bool = (1 + 1) * Eight * Bool
| aaa = fseq ~f:vs ~g:embededS aaa

iso sv : (1 + 1) * Bool * Eight = (1 + 1) * Bool * Eight
| aaa = fseq4 ~f:embededSqrtNot ~g:swap3 ~h:embededS ~i:swap3 aaa

iso vsv : (1 + 1) * Bool * Eight = (1 + 1) * Bool * Eight
| aaa = fseq ~f:sv ~g:embededSqrtNot aaa

{--
eval swap3 (inR (), E3, TT)
eval svs (inR (), E3, FF)
eval vsv (inR (), FF, E3)
--}

{--
now simulate the Hadmard gate following [sqrtpi]
--}

iso not_embeded_8 : (1 + 1) * Eight = (1 + 1) * Eight
| a = embed_8 ~f:not a

iso not_embeded : (1 + 1) * Eight * Bool = (1 + 1) * Eight * Bool
| a = embed_2 ~f:not_embeded_8 a

iso xsvsx : (1 + 1) * Eight * Bool = (1 + 1) * Eight * Bool
| aaa = fseq3 ~f:not_embeded ~g:svs ~h:not_embeded aaa

{--
eval xsvsx (inR (), E7, FF)
eval xsvsx (inR (), E7, TT)
eval xsvsx (inL (), E3, FF)
eval xsvsx (inL (), E7, TT)
--}


iso cbrt3 : f:(A = A) -> (A * Three = A * Three)
| (a, B1)   = (a, B2)
| (a, B2)   = (f a, B3)
| (f a, B3) = (f a, B1)

iso add1_Nat2 : Bool * Bool = Bool * Bool
| (FF, FF) = (FF, TT)
| (TT, FF) = (TT, TT)
| (FF, TT) = (TT, FF)
| (TT, TT) = (FF, FF)

iso unfoldNat : Nat = 1 + Nat
| Z   = inL ()
| S n = inR n

iso unfoldNat_ : Nat * (1 + Nat) = Nat * (1 + Nat)
| (Z, inL ())   = (Z, inL ())
| (S n, inL ()) = (Z, inR n)
| (Z, inR m)    = (S m, inL ())
| (S n, inR m)  = (S m, inR n)

{-
eval sqrt_2 ~f:add1_Nat2 (FF, TT, FF)  # expected: (FF, TT, TT)
eval sqrt_2 ~f:add1_Nat2 (FF, TT, TT)  # expected: (TT, FF, FF)
eval sqrt_2 ~f:add1_Nat2 (TT, TT, TT)  # expected: (FF, FF, FF)

eval fseq ~f:(sqrt_2 ~f:add1_Nat2) ~g:(sqrt_2 ~f:add1_Nat2) (FF, TT, FF)  # expected: (TT, FF, FF)
eval fseq ~f:(sqrt_2 ~f:add1_Nat2) ~g:(sqrt_2 ~f:add1_Nat2) (TT, TT, TT)  # expected: (FF, FF, TT)

eval sqrt_2 ~f:unfoldNat_ (Z, inR Z, FF)
eval sqrt_2 ~f:unfoldNat_ (Z, inR Z, TT)
eval fseq ~f:(sqrt_2 ~f:unfoldNat_) ~g:(sqrt_2 ~f:unfoldNat_) (Z, inR Z, FF)

eval sqrt_2 ~f:unfoldNat_ (S S Z, inR Z, FF)
eval sqrt_2 ~f:unfoldNat_ (S S Z, inR Z, TT)
eval fseq ~f:(sqrt_2 ~f:unfoldNat_) ~g:(sqrt_2 ~f:unfoldNat_) (S S Z, inR Z, FF)


eval cbrt3 ~f:add1_Nat2 (FF, TT, B1)
eval cbrt3 ~f:add1_Nat2 (FF, TT, B2)
eval cbrt3 ~f:add1_Nat2 (TT, FF, B3)  # expected: (TT, FF, B1)
-}


## what kind of interesting Theseus programs we can write with sqrt_2 to get "quantum"?